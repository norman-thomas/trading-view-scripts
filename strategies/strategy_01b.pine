
// TODO:
// - use "steepness" of orange Signal line from MACD for Short signal.. must not be too flat
// - use "stepness" of blue MACD line for Long signal, must not be too flat, must (!) go up
// - (maybe use lin-reg to predict crossover/under)
// - 


// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © herokk

//@version=4
strategy("Test 01 (MACD + DMI)", default_qty_value=100, default_qty_type=strategy.percent_of_equity, initial_capital=1000)

startDate = input(title="Start Date", type=input.integer, defval=1, minval=1, maxval=31)
startMonth = input(title="Start Month", type=input.integer, defval=1, minval=1, maxval=12)
startYear = input(title="Start Year", type=input.integer, defval=2020, minval=2000, maxval=2100)
isAfterStartDate = (time >= timestamp(syminfo.timezone, startYear, startMonth, startDate, 0, 0))



len = input(17, minval=1, title="DI Length")
lensig = input(14, title="ADX Smoothing", minval=1, maxval=50)

lenLong = 26
lenShort = 12
lenSignal = 9

[diplus, diminus, adx] = dmi(len, lensig)
[macdLine, signalLine, histLine] = macd(close, lenShort, lenLong, lenSignal)

// CONDITIONS
// for LONG
// MACD: (B=macd, R=signal)
// - Blue crosses above Red
// --> B > R and before B < R
macdCrossesOverSignal = crossover(macdLine, signalLine)
macdCrossesUnderSignal = crossunder(macdLine, signalLine)
macdMightCrossUnder = abs(macdLine - signalLine) < 20
macdSignalDistanceDecreasing = abs(macdLine - signalLine) < abs(macdLine[1] - signalLine[1])
// macdTooCloseToSignal = (abs(macdLine - signalLine) + abs(macdLine[1] - signalLine[1])) < 35
macdTooCloseToSignal = (abs(macdLine - signalLine) + abs(macdLine[1] - signalLine[1]) + abs(macdLine[2] - signalLine[2]) + abs(macdLine[3] - signalLine[3])) < 120
// macdAsymptoticToSignal = (abs(macdLine - signalLine) + abs(macdLine[1] - signalLine[1]) + abs(macdLine[2] - signalLine[2]) + abs(macdLine[3] - signalLine[3])) < 100

// - Blue is above 0
// --> B > 0
macdAboveZero = macdLine > 0
// - Blue crosses steeply
// --> angle(B) > 0 && angle(B) >> angle(R)
macdDiff = macdLine - macdLine[1]
signalDiff = signalLine - signalLine[1]
macdSteep = macdDiff > 0 and macdDiff > signalDiff + 10


// DMI: (B=DI+, R=DI-)
// - Blue is above Red
// --> B > R
diPlusAboveMinus = diplus > diminus
// - Blue goes up steeply
// --> °> of B  >>  °> R
// diPlusRisesSteeply = angle(B) > 0 && angle(B) > angle(R)
diPlusDiff = diplus - diplus[1]
diPlusPreviousDiff = diplus[1] - diplus[2]
diMinusDiff = diminus - diminus[1]
diPlusRisesSteeply = max(diPlusDiff, diPlusDiff + diPlusPreviousDiff) > 10 and diPlusDiff > diMinusDiff  // ?
diPlusGoesUp = diPlusDiff > 0
diMinusGowsDown = diMinusDiff < 0
diConverges = abs(diplus - diminus) < abs(diplus[1] - diminus[1])
// - Blue is above 25-line
// --> B > 23 (-5 buffer)
diPlusAboveADXLevel = diplus > (23 - 5)

// COMBINED CONDITIONS
// LONG: (or)
// * macd#1 && DI+ >= DI-
longCondition1 = macdCrossesOverSignal and diPlusAboveMinus and not macdTooCloseToSignal
// * macd#1 && DI+ rising && DI- falling
longCondition2 = macdCrossesOverSignal and (diPlusRisesSteeply or not diConverges) and not macdTooCloseToSignal
// * macd#1 && Δ(DI+, DI-) >≈ 0 && DI+ ≳ 20~25
longCondition3 = macdCrossesOverSignal and diPlusAboveADXLevel and not macdTooCloseToSignal

// SOLID LONG:
// * macd#1 && DI+ > DI- && DI+ > 25 && macdB > 0
strongLongCondition1 = (macdCrossesOverSignal and macdAboveZero) and diPlusAboveMinus and diPlusAboveADXLevel and macdSteep //and not macdTooCloseToSignal

// SHORT:
// * macd topped out
macdToppedOut = (macdLine <= macdLine[1] and macdSignalDistanceDecreasing) // or macdMightCrossUnder
macdBottomedOut = (macdLine >= macdLine[1]) // or macdMightCrossUnder
// * DI+ was up, now down && DI- was down, now up
diPlusTurnsDownwards = diplus < diplus[1] and diplus[1] > diplus[2]

shortCondition1 = diPlusTurnsDownwards and false
shortCondition2 = false and (macdCrossesUnderSignal or (not diPlusGoesUp and not diConverges))
shortCondition3 = macdToppedOut

strongShortCondition = macdCrossesUnderSignal and (not diPlusGoesUp or diConverges) and not macdSignalDistanceDecreasing and not diMinusGowsDown and not macdTooCloseToSignal
closeShortCondition = macdBottomedOut


goLong = strongLongCondition1 or longCondition1 or longCondition2 or longCondition3
closeLong = shortCondition1 or shortCondition2 or shortCondition3

goShort = strongShortCondition
closeShort = closeShortCondition

if isAfterStartDate and goLong
    strategy.entry("Long", strategy.long) //, when=strategy.position_size <= 0)
    // label1 = label.new(x=bar_index, y=na, text="B", yloc=yloc.belowbar, color=color.green, textcolor=color.white, style=label.style_label_up, size=size.normal)
if isAfterStartDate and closeLong
    strategy.close("Long")
    // label1 = label.new(x=bar_index, y=na, text="S", yloc=yloc.belowbar, color=color.orange, textcolor=color.white, style=label.style_label_up, size=size.normal)
    
if isAfterStartDate and goShort
    strategy.entry("Short", strategy.short, when=strategy.position_size <= 0)
if isAfterStartDate and closeShort
    strategy.close("Short")
    


// plot(signalLine, color=color.orange)
// plot(macdLine, color=color.blue)
// plot(histLine, style=plot.style_stepline, color=color.white)
plot(goLong ? macdLine : na, color=color.green)
plot(closeLong ? macdLine : na, color=color.red)
